
import { AlphaConfig, ArrayConfig,DefaultConfig, ControlValidators, RequiredConfig, ValidatorFn, CreditCardConfig, DifferentConfig, DigitConfig, EmailConfig, ExtensionConfig, FactorConfig, RelationalOperatorConfig, HexColorConfig, IpConfig, MessageConfig, MaxDateConfig, NumberConfig, MaxTimeConfig, MinDateConfig, MinTimeConfig, NumericConfig, PasswordConfig, PatternConfig, RangeConfig, TimeConfig, BaseValidatorConfig } from '@nattyjs/validation-decorators'
import { callValidator } from '../functions/call-validators'
export const Validators={
    required:(config?:RequiredConfig)=>callValidator(config,ControlValidators.required),
    allOf:(config?:ArrayConfig)=>callValidator(config,ControlValidators.allOf),
    alphaNumeric:(config?:AlphaConfig)=>callValidator(config,ControlValidators.alphaNumeric),
    alpha:(config?:AlphaConfig)=>callValidator(config,ControlValidators.alpha),
    ascii:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.ascii),
    contains:(config?:DefaultConfig)=>callValidator(config,ControlValidators.contains),
    creditCard:(config?: CreditCardConfig)=>callValidator(config,ControlValidators.creditCard),
    cusip:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.cusip),
    dataUri:(config?:ArrayConfig)=>callValidator(config,ControlValidators.dataUri),
    date:(config?:ArrayConfig)=>callValidator(config,ControlValidators.date),
    different:(config?:DifferentConfig)=>callValidator(config,ControlValidators.different),
    digit:(config?:DigitConfig)=>callValidator(config,ControlValidators.digit),
    email:(config?:EmailConfig)=>callValidator(config,ControlValidators.email),
    endsWith:(config?:DefaultConfig)=>callValidator(config,ControlValidators.endsWith),
    even:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.even),
    extension:(config?:ExtensionConfig)=>callValidator(config,ControlValidators.extension),
    factor:(config?:FactorConfig)=>callValidator(config,ControlValidators.factor),
    greaterThan:(config?:RelationalOperatorConfig)=>callValidator(config,ControlValidators.greaterThan),
    greaterThanEqualTo:(config?:RelationalOperatorConfig)=>callValidator(config,ControlValidators.greaterThanEqualTo),
    grid:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.grid),
    hexColor:(config?:HexColorConfig)=>callValidator(config,ControlValidators.hexColor),
    ip:(config?:IpConfig)=>callValidator(config,ControlValidators.ip),
    json:(config?:DefaultConfig)=>callValidator(config,ControlValidators.json),
    latLong:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.latLong),
    lattitude:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.lattitude),
    leapYear:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.leapYear),
    lessThanEqualTo:(config?:RelationalOperatorConfig)=>callValidator(config,ControlValidators.lessThanEqualTo),
    lessThan:(config?:RelationalOperatorConfig)=>callValidator(config,ControlValidators.lessThan),
    longitude:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.longitude),
    lowercase:(config?:MessageConfig)=>callValidator(config,ControlValidators.lowercase),
    mac:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.mac),
    maxDate:(config?:MaxDateConfig)=>callValidator(config,ControlValidators.maxDate),
    maxLength:(config?:NumberConfig)=>callValidator(config,ControlValidators.maxLength),
    maxNumber:(config?:NumberConfig)=>callValidator(config,ControlValidators.maxNumber),
    maxTime:(config?:MaxTimeConfig)=>callValidator(config,ControlValidators.maxTime),
    minDate:(config?:MinDateConfig)=>callValidator(config,ControlValidators.minDate),
    minLength:(config?:NumberConfig)=>callValidator(config,ControlValidators.minLength),
    minNumber:(config?:NumberConfig)=>callValidator(config,ControlValidators.minNumber),
    minTime:(config?:MinTimeConfig)=>callValidator(config,ControlValidators.minTime),
    noneOf:(config?:ArrayConfig)=>callValidator(config,ControlValidators.noneOf),
    notEmpty:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.notEmpty),
    numeric:(config?:NumericConfig)=>callValidator(config,ControlValidators.numeric),
    odd:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.odd),
    oneOf:(config?:ArrayConfig)=>callValidator(config,ControlValidators.oneOf),
    password:(config?:PasswordConfig)=>callValidator(config,ControlValidators.password),
    pattern:(config?:PatternConfig)=>callValidator(config,ControlValidators.pattern),
    port:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.port),
    primeNumber:(config?:BaseValidatorConfig)=>callValidator(config,ControlValidators.primeNumber),
    range:(config?:RangeConfig)=>callValidator(config,ControlValidators.range),
    startsWith:(config?:DefaultConfig)=>callValidator(config,ControlValidators.startsWith),
    time:(config?:TimeConfig)=>callValidator(config,ControlValidators.time),
    uppercase:(config?:MessageConfig)=>callValidator(config,ControlValidators.uppercase),
    url:(config?:DefaultConfig)=>callValidator(config,ControlValidators.url)

}

